/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DataBase,
  DataBaseInterface,
} from "../../../contracts/Database.sol/DataBase";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_main",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAddressBook",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "getBal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShares",
    outputs: [
      {
        internalType: "uint8[]",
        name: "",
        type: "uint8[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "targets",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "byteShares",
        type: "bytes",
      },
    ],
    name: "setArrays",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_backup",
        type: "address",
      },
    ],
    name: "setBackup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620011df380380620011df833981810160405281019062000037919062000110565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d882620000ab565b9050919050565b620000ea81620000cb565b8114620000f657600080fd5b50565b6000815190506200010a81620000df565b92915050565b600060208284031215620001295762000128620000a6565b5b60006200013984828501620000f9565b91505092915050565b60805160a051611069620001766000396000818161025301526105f00152600081816101fe015261059b01526110696000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632fa78085146100675780633a98ef39146100975780633c6e7161146100b55780636a3dc30b146100d3578063b7dacbf1146100ef578063d73fe0aa1461010b575b600080fd5b610081600480360381019061007c9190610945565b610129565b60405161008e919061098b565b60405180910390f35b61009f61014a565b6040516100ac919061098b565b60405180910390f35b6100bd610150565b6040516100ca9190610a64565b60405180910390f35b6100ed60048036038101906100e89190610bcc565b6101de565b005b61010960048036038101906101049190610945565b61057b565b005b610113610707565b6040516101209190610d0f565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b60015481565b606060008054806020026020016040519081016040528092919081815260200182805480156101d457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161018a575b5050505050905090565b600033905060008173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16148061028a57508173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16145b806102e257508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b905080610324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031b90610d8e565b60405180910390fd5b6000601485516103349190610ddd565b14610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036b90610e5a565b60405180910390fd5b6000601485516103849190610ea9565b9050835181146103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610f26565b60405180910390fd5b60008167ffffffffffffffff8111156103e5576103e4610aa1565b5b6040519080825280602002602001820160405280156104135781602001602082028036833780820191505090505b50905060008267ffffffffffffffff81111561043257610431610aa1565b5b6040519080825280602002602001820160405280156104605781602001602082028036833780820191505090505b509050600080600090505b8481101561053b5760008060006014846104859190610f46565b90508060148d010151801993508460018d010151925050828785815181106104b0576104af610f88565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081198685815181106104ff576104fe610f88565b5b602002602001019060ff16908160ff1681525050811960ff16856105239190610fb7565b9450505050808061053390610feb565b91505061046b565b508260009080519060200190610552929190610785565b50816002908051906020019061056992919061080f565b50806001819055505050505050505050565b600033905060008173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16148061062757508173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16145b8061067f57508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b9050806106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610d8e565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561077b57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116107445790505b5050505050905090565b8280548282559060005260206000209081019282156107fe579160200282015b828111156107fd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107a5565b5b50905061080b91906108b6565b5090565b82805482825590600052602060002090601f016020900481019282156108a55791602002820160005b8382111561087657835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610838565b80156108a35782816101000a81549060ff0219169055600101602081600001049283019260010302610876565b505b5090506108b291906108b6565b5090565b5b808211156108cf5760008160009055506001016108b7565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610912826108e7565b9050919050565b61092281610907565b811461092d57600080fd5b50565b60008135905061093f81610919565b92915050565b60006020828403121561095b5761095a6108dd565b5b600061096984828501610930565b91505092915050565b6000819050919050565b61098581610972565b82525050565b60006020820190506109a0600083018461097c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109db81610907565b82525050565b60006109ed83836109d2565b60208301905092915050565b6000602082019050919050565b6000610a11826109a6565b610a1b81856109b1565b9350610a26836109c2565b8060005b83811015610a57578151610a3e88826109e1565b9750610a49836109f9565b925050600181019050610a2a565b5085935050505092915050565b60006020820190508181036000830152610a7e8184610a06565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ad982610a90565b810181811067ffffffffffffffff82111715610af857610af7610aa1565b5b80604052505050565b6000610b0b6108d3565b9050610b178282610ad0565b919050565b600067ffffffffffffffff821115610b3757610b36610aa1565b5b610b4082610a90565b9050602081019050919050565b82818337600083830152505050565b6000610b6f610b6a84610b1c565b610b01565b905082815260208101848484011115610b8b57610b8a610a8b565b5b610b96848285610b4d565b509392505050565b600082601f830112610bb357610bb2610a86565b5b8135610bc3848260208601610b5c565b91505092915050565b60008060408385031215610be357610be26108dd565b5b600083013567ffffffffffffffff811115610c0157610c006108e2565b5b610c0d85828601610b9e565b925050602083013567ffffffffffffffff811115610c2e57610c2d6108e2565b5b610c3a85828601610b9e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b610c8681610c70565b82525050565b6000610c988383610c7d565b60208301905092915050565b6000602082019050919050565b6000610cbc82610c44565b610cc68185610c4f565b9350610cd183610c60565b8060005b83811015610d02578151610ce98882610c8c565b9750610cf483610ca4565b925050600181019050610cd5565b5085935050505092915050565b60006020820190508181036000830152610d298184610cb1565b905092915050565b600082825260208201905092915050565b7f4e6f7420617574686f7269736564000000000000000000000000000000000000600082015250565b6000610d78600e83610d31565b9150610d8382610d42565b602082019050919050565b60006020820190508181036000830152610da781610d6b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de882610972565b9150610df383610972565b925082610e0357610e02610dae565b5b828206905092915050565b7f496e707574206f6e6c7920616464726573730000000000000000000000000000600082015250565b6000610e44601283610d31565b9150610e4f82610e0e565b602082019050919050565b60006020820190508181036000830152610e7381610e37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb482610972565b9150610ebf83610972565b925082610ecf57610ece610dae565b5b828204905092915050565b7f5368617265732641646472657373206c656e206d69736d617463680000000000600082015250565b6000610f10601b83610d31565b9150610f1b82610eda565b602082019050919050565b60006020820190508181036000830152610f3f81610f03565b9050919050565b6000610f5182610972565b9150610f5c83610972565b9250828202610f6a81610972565b91508282048414831517610f8157610f80610e7a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610fc282610972565b9150610fcd83610972565b9250828201905080821115610fe557610fe4610e7a565b5b92915050565b6000610ff682610972565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361102857611027610e7a565b5b60018201905091905056fea26469706673582212200d36317c363b1fec8049d8a6ed18d2cfaf959003ef9061996943f4d2d0a1e63d64736f6c63430008110033";

type DataBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataBase__factory extends ContractFactory {
  constructor(...args: DataBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _main: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataBase> {
    return super.deploy(_main, overrides || {}) as Promise<DataBase>;
  }
  override getDeployTransaction(
    _main: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_main, overrides || {});
  }
  override attach(address: string): DataBase {
    return super.attach(address) as DataBase;
  }
  override connect(signer: Signer): DataBase__factory {
    return super.connect(signer) as DataBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataBaseInterface {
    return new utils.Interface(_abi) as DataBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataBase {
    return new Contract(address, _abi, signerOrProvider) as DataBase;
  }
}
