/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SpreadLove,
  SpreadLoveInterface,
} from "../../Lock.sol/SpreadLove";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IDatabase",
        name: "db",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "database",
    outputs: [
      {
        internalType: "contract IDatabase",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "disperseEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address payable[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "disperseToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address payable[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "disperseTokenSimple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "first",
    outputs: [
      {
        internalType: "address",
        name: "un",
        type: "address",
      },
      {
        internalType: "address",
        name: "deux",
        type: "address",
      },
      {
        internalType: "address",
        name: "trois",
        type: "address",
      },
      {
        internalType: "address",
        name: "quattre",
        type: "address",
      },
      {
        internalType: "address",
        name: "cinq",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "second",
    outputs: [
      {
        internalType: "address",
        name: "un",
        type: "address",
      },
      {
        internalType: "address",
        name: "deux",
        type: "address",
      },
      {
        internalType: "address",
        name: "trois",
        type: "address",
      },
      {
        internalType: "address",
        name: "quattre",
        type: "address",
      },
      {
        internalType: "address",
        name: "cinq",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000e2e38038062000e2e833981810160405281019061003491906100ef565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100aa8261007f565b9050919050565b60006100bc8261009f565b9050919050565b6100cc816100b1565b81146100d757600080fd5b50565b6000815190506100e9816100c3565b92915050565b6000602082840312156101055761010461007a565b5b6000610113848285016100da565b91505092915050565b610d02806200012c6000396000f3fe6080604052600436106100555760003560e01c80633df4ddf41461005a57806351ba162c146100895780635a8ac02d146100b2578063713b563f146100e1578063c73a2d601461010c578063e63d38ed14610135575b600080fd5b34801561006657600080fd5b5061006f610151565b6040516100809594939291906106c4565b60405180910390f35b34801561009557600080fd5b506100b060048036038101906100ab919061081a565b6101fa565b005b3480156100be57600080fd5b506100c76102ec565b6040516100d89594939291906106c4565b60405180910390f35b3480156100ed57600080fd5b506100f6610395565b604051610103919061090e565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e919061081a565b6103b9565b005b61014f600480360381019061014a9190610929565b61057d565b005b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633df4ddf46040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e991906109d6565b945094509450945094509091929394565b60005b848490508110156102e4578573ffffffffffffffffffffffffffffffffffffffff166323b872dd3387878581811061023857610237610a51565b5b905060200201602081019061024d9190610abe565b8686868181106102605761025f610a51565b5b905060200201356040518463ffffffff1660e01b815260040161028593929190610b25565b6020604051808303816000875af11580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610b94565b6102d157600080fd5b80806102dc90610bf0565b9150506101fd565b505050505050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a8ac02d6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906109d6565b945094509450945094509091929394565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000805b85859050811015610402578383828181106103db576103da610a51565b5b90506020020135826103ed9190610c38565b915080806103fa90610bf0565b9150506103bd565b508573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161044093929190610c6c565b6020604051808303816000875af115801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190610b94565b61048c57600080fd5b60005b85859050811015610574578673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8787848181106104c9576104c8610a51565b5b90506020020160208101906104de9190610abe565b8686858181106104f1576104f0610a51565b5b905060200201356040518363ffffffff1660e01b8152600401610515929190610ca3565b6020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610b94565b61056157600080fd5b808061056c90610bf0565b91505061048f565b50505050505050565b60005b848490508110156106255784848281811061059e5761059d610a51565b5b90506020020160208101906105b39190610abe565b73ffffffffffffffffffffffffffffffffffffffff166108fc8484848181106105df576105de610a51565b5b905060200201359081150290604051600060405180830381858888f19350505050158015610611573d6000803e3d6000fd5b50808061061d90610bf0565b915050610580565b506000479050600081111561067c573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561067a573d6000803e3d6000fd5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ae82610683565b9050919050565b6106be816106a3565b82525050565b600060a0820190506106d960008301886106b5565b6106e660208301876106b5565b6106f360408301866106b5565b61070060608301856106b5565b61070d60808301846106b5565b9695505050505050565b600080fd5b600080fd5b600061072c826106a3565b9050919050565b61073c81610721565b811461074757600080fd5b50565b60008135905061075981610733565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107845761078361075f565b5b8235905067ffffffffffffffff8111156107a1576107a0610764565b5b6020830191508360208202830111156107bd576107bc610769565b5b9250929050565b60008083601f8401126107da576107d961075f565b5b8235905067ffffffffffffffff8111156107f7576107f6610764565b5b60208301915083602082028301111561081357610812610769565b5b9250929050565b60008060008060006060868803121561083657610835610717565b5b60006108448882890161074a565b955050602086013567ffffffffffffffff8111156108655761086461071c565b5b6108718882890161076e565b9450945050604086013567ffffffffffffffff8111156108945761089361071c565b5b6108a0888289016107c4565b92509250509295509295909350565b6000819050919050565b60006108d46108cf6108ca84610683565b6108af565b610683565b9050919050565b60006108e6826108b9565b9050919050565b60006108f8826108db565b9050919050565b610908816108ed565b82525050565b600060208201905061092360008301846108ff565b92915050565b6000806000806040858703121561094357610942610717565b5b600085013567ffffffffffffffff8111156109615761096061071c565b5b61096d8782880161076e565b9450945050602085013567ffffffffffffffff8111156109905761098f61071c565b5b61099c878288016107c4565b925092505092959194509250565b6109b3816106a3565b81146109be57600080fd5b50565b6000815190506109d0816109aa565b92915050565b600080600080600060a086880312156109f2576109f1610717565b5b6000610a00888289016109c1565b9550506020610a11888289016109c1565b9450506040610a22888289016109c1565b9350506060610a33888289016109c1565b9250506080610a44888289016109c1565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a8b82610683565b9050919050565b610a9b81610a80565b8114610aa657600080fd5b50565b600081359050610ab881610a92565b92915050565b600060208284031215610ad457610ad3610717565b5b6000610ae284828501610aa9565b91505092915050565b6000610af6826108db565b9050919050565b610b0681610aeb565b82525050565b6000819050919050565b610b1f81610b0c565b82525050565b6000606082019050610b3a60008301866106b5565b610b476020830185610afd565b610b546040830184610b16565b949350505050565b60008115159050919050565b610b7181610b5c565b8114610b7c57600080fd5b50565b600081519050610b8e81610b68565b92915050565b600060208284031215610baa57610ba9610717565b5b6000610bb884828501610b7f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfb82610b0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2d57610c2c610bc1565b5b600182019050919050565b6000610c4382610b0c565b9150610c4e83610b0c565b9250828201905080821115610c6657610c65610bc1565b5b92915050565b6000606082019050610c8160008301866106b5565b610c8e60208301856106b5565b610c9b6040830184610b16565b949350505050565b6000604082019050610cb86000830185610afd565b610cc56020830184610b16565b939250505056fea264697066735822122078362358db4719a8e13f372fc05db0d51f2bad09896956b7bae05c8cef01e93c64736f6c63430008110033";

type SpreadLoveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SpreadLoveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SpreadLove__factory extends ContractFactory {
  constructor(...args: SpreadLoveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    db: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SpreadLove> {
    return super.deploy(db, overrides || {}) as Promise<SpreadLove>;
  }
  override getDeployTransaction(
    db: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(db, overrides || {});
  }
  override attach(address: string): SpreadLove {
    return super.attach(address) as SpreadLove;
  }
  override connect(signer: Signer): SpreadLove__factory {
    return super.connect(signer) as SpreadLove__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SpreadLoveInterface {
    return new utils.Interface(_abi) as SpreadLoveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SpreadLove {
    return new Contract(address, _abi, signerOrProvider) as SpreadLove;
  }
}
